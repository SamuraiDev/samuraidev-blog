<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linguagens e frameworks | My Octopress Blog]]></title>
  <link href="http://guilhermeka.github.com/samuraidev-blog/blog/categories/linguagens-e-frameworks/atom.xml" rel="self"/>
  <link href="http://guilhermeka.github.com/samuraidev-blog/"/>
  <updated>2012-09-07T20:23:32-03:00</updated>
  <id>http://guilhermeka.github.com/samuraidev-blog/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Você conhece Ruby?]]></title>
    <link href="http://guilhermeka.github.com/samuraidev-blog/blog/2012/07/04/voce-conhece-ruby/"/>
    <updated>2012-07-04T16:30:35-03:00</updated>
    <id>http://guilhermeka.github.com/samuraidev-blog/blog/2012/07/04/voce-conhece-ruby</id>
    <content type="html"><![CDATA[<p>[singlepic id=28]</p>

<p>Em mais um episodio da nossa serie "Voce conhece?",  apresentarei a linguagem Ruby. Porem nao entraremos em codigo desta vez, deixaremos esta tarefa para os proximos posts, hoje iremos focar na historia e no ecossistema Ruby.</p>

<h2>Um pouco de historia</h2>

<p>Ruby nasceu no Japao! Começou a ser escrita por <a href="http://en.wikipedia.org/wiki/Yukihiro_Matsumoto">Yukihiro Matsumoto</a>, mais conhecido como Matz, em 24 de fevereiro de 1993. Matz conhecia muitas linguagens, mas nao estava completamente satisfeito com elas. Achava-as feias, difices e complexas, entao resolveu criar sua propria linguagem. Para isso, Matz misturou partes das suas linguagens favoritas (como Perl, Smalltalk, Lisp, Ada e Eiffel), criando uma linguagem que equilibra programaçao funcional com imperativa. Além disso, Ruby é uma linguagem interpretada, puramente orientada a objetos com tipagem forte e dinamica, possui uma poderosa capacidade de <a href="http://pt.wikipedia.org/wiki/Metaprograma%C3%A7%C3%A3o">metaprogramaçao</a> e pode facilmente ser usada para criaçao de DSLs (<a href="http://en.wikipedia.org/wiki/Domain-specific_language">Domain Specific Language</a>). Com todas essas caracteristicas, Matz conseguiu criar uma linguagem simples, pratica e muito expressiva!</p>

<p>CURIOSIDADE: Matz ganhou em 2011 o <a href="https://www.fsf.org/news/2011-free-software-awards-announced">FSF Free Software Awards</a> pelo sua dedicaçao ao software livre nos ultimos 20 anos, contribuindo com o Ruby, projeto GNU e outros projetos open source.</p>

<h2>Interpretadores</h2>

<p>O primeiro interpretador de Ruby foi o MRI (Matz Ruby Interpretr ou CRuby, pois e escrito em C). Com a popularizaçao da linguagem (que se deve em grande parte ao <a href="http://rubyonrails.org/">Rails</a>), começaram a surgir outras  implementaçoes do interpretador, que deixaram de ser simples interpretadores e passaram a basear-se, na maioria, em Maquinas virtuais. Gostaria de destacar aqui o <a href="http://jruby.org/">JRuby</a> e o <a href="http://www.ironruby.net/">IronRuby</a>, implementaçao da linguagem para rodar na JVM (maquina virtual do Java) e plataforma Microsoft (.Net), respectivamente. O fato curioso e que o JRuby e considerado por muitos a implementaçao mais rapida da linguagem. O IronRuby e mantido pela propria Microsoft (e e um dos primeiros projetos verdadeiramente open source da empresa).</p>

<h2>RVM</h2>

<p>Em uma explicaçao minimalista podemos dizer que o <a href="https://rvm.io/">RMV</a> (Ruby Version Manager) e uma ferramenta de linha de comando para gerenciamento de versoes Ruby. Com ele podemos ter varias versoes do Ruby (chamadas de Rubies pelo RVM) instaladas e alterar a que estamos utilizando muito facilmente. Podemos tambem criar gemsets, que sao ambientes separadas para organizarmos nossos projetos. Por exemplo, se eu tiver o ruby 1.8.6 e o jruby instalados, havera dois gemsets (um para cada um), entao posso ter uma versao diferente do rails em cada um. No caso tambem poderiamos criar um gemset para trabalhar com Rails 2 e outro para Rails 3, bastando assim uma rapida alteraçao via RVM para trocarmos de ambiente. Se voce ainda nao tem o Ruby instalado sugiro que ja comece instalando via rvm.</p>

<ul>
<li><p><a href="http://akitaonrails.com/2010/01/01/limpando-meu-ambiente-de-desenvolvimento">Post interessante do Akita (um dos primeiros evangelistas de Ruby no Brasil) sobre o RVM</a></p></li>
<li><p><a href="http://codificando.com/2010/07/gerencie-ambiente-ruby-rvm/">Post do Emerson Macedo (do Globo.com) sobre o gerenciamento do ambiente com RVM.</a></p></li>
</ul>


<p>OBS: O RVM nao roda em Windows. Nesse caso a alternativa e utilizar o           <a href="https://github.com/vertiginous/pik/">pik</a>. <a href="https://rvm.io/os/">Aqui</a> voce pode encontrar a lista de sistemas suportados pelo RVM.
[editado] Achei na própria documentação do Ruby este link para <a href="http://blog.developwithpassion.com/2012/03/30/installing-rvm-with-cygwin-on-windows/">instalar RVM no Windows com Cygwin</a>.</p>

<h2>IRB</h2>

<p>O IRB (Interactive Ruby Shell) e um console interativo onde podemos fazer alguns testes com a linguagem. Tendo um ambiente corretamente configurado, basta digitar irb no terminal para inicia-lo.</p>

<p>[singlepic id=27]</p>

<h2>RubyGems</h2>

<p>As RubyGems, ou simplesmente Gems, sao pacotes que contem uma biblioteca ou aplicaçao Ruby. Existe tambem a aplicaçao RubyGems (ferramenta de linha de comando) que e um gerenciador de pacotes e foi amplamente adotado pela comunidade Ruby. Com ele podemos de maneira muito simples baixar, instalar e manipular uma gem em nosso sistema.</p>

<ol>
<li><p><a href="http://docs.rubygems.org/read/chapter/3">Instalaçao do RubyGems</a></p></li>
<li><p><a href="http://simplesideias.com.br/criando-sua-propria-rubygem/">Post do Nando Vieira sobre como criar uma RubyGem</a></p></li>
<li><a href="http://akitaonrails.com/2009/02/02/entendendo-rubygems">Post do Akita falando sobre RubyGems</a></li>
</ol>


<h2>Algumas Gems</h2>

<ul>
<li><p><a href="http://gembundler.com/">Bundler</a>: Gerenciador de dependencias.</p></li>
<li><p><a href="https://github.com/capistrano/capistrano/">Capistrano</a>: Ferramenta para executar comandos/scripts paralelamente em maquinas remotas (via SSH).</p></li>
<li><p><a href="http://rake.rubyforge.org/">Rake</a>: Ferramenta para automatizar a construçao da aplicaçao.</p></li>
<li><p><a href="http://rack.github.com/">Rack</a>: Simples interface entre um servidor Web (com suporte a Ruby) e um framework Web Ruby. O <a href="http://www.sinatrarb.com/">Sinatra</a> e o <a href="http://rubyonrails.org/">Rails</a> sao exemplos de framework que o utilizam.</p></li>
<li><p><a href="http://cukes.info/">Cucumber</a> e <a href="http://rspec.info/">RSpec</a>: Ambos sao frameworks para testes que seguem o <a href="http://pt.wikipedia.org/wiki/Behavior_Driven_Development">BDD</a>.</p></li>
<li><p><a href="https://github.com/eventmachine/eventmachine/wiki/">EventMachine</a>:Biblioteca que fornece operaçoes de entrada e saida orientada a eventos. Feito para combater o problema <a href="http://en.wikipedia.org/wiki/C10k_problem">C10k</a>.</p></li>
<li><p><a href="http://datamapper.org/">DataMapper</a> e <a href="http://ar.rubyonrails.org/">ActiveRecord</a>: Dois frameworks <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a>.</p></li>
<li><p><a href="http://torquebox.org/">TorqueBox</a>: Servidor de aplicaçao Ruby escrito em cima do <a href="http://www.jboss.org/jbossas">JBoss AS</a> com suporte para qualquer aplicaçao Rack.</p></li>
</ul>


<p>[singlepic id=25]</p>

<h2>IDE</h2>

<p>Ate existem algumas <a href="http://pt.wikipedia.org/wiki/Ambiente_de_Desenvolvimento_Integrado">IDEs</a> para Ruby, mas a comunidade nao e muito fa. Confesso que a pouco tempo atras tentei montar novamente um ambiente com <a href="http://www.eclipse.org/">Eclipse</a> e o <a href="http://www.eclipse.org/dltk/">DLTK</a>, porem, com a simplicidade de Ruby ficamos livre de uma ferramenta como essa, podendo adotar apenas um editor de texto simples (como o <a href="http://samuraidev.com/tutoriais/dica-de-editor-simples-sublimetext/">Sublime Text</a>) e o terminal. Na verdade o Sublime é uma alternativa mais user-friendly, o comum mesmo é vermos o pessoal utilizando <a href="http://en.wikipedia.org/wiki/Vi">VI</a> ou <a href="http://www.gnu.org/software/emacs/">Emacs</a> no Linux e <a href="http://macromates.com/">TextMate</a> no Mac.</p>

<h2>Finalizando...</h2>

<p>Entao, tentei fazer uma introduçao rapida ao mundo Ruby de uma forma que eu gostaria de visto quando comecei. Logo que iniciamos o estudo de uma nova linguagem/plataforma somos bombardeados com nomes de aplicaçoes e frameworks, nessa hora paramos para pensar pra qual lado devemos correr primeiro. Espero que tenham gostado e ate a proxima!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Você conhece Memcached?!]]></title>
    <link href="http://guilhermeka.github.com/samuraidev-blog/blog/2012/06/16/voce-conhece-memcached/"/>
    <updated>2012-06-16T16:17:21-03:00</updated>
    <id>http://guilhermeka.github.com/samuraidev-blog/blog/2012/06/16/voce-conhece-memcached</id>
    <content type="html"><![CDATA[<p>[singlepic id=18 w=160 h=120 float=left]</p>

<p>Memcached é um sistema para lidar com memória cache de forma distribuida e com alto desempenho. Dependendo do design de sua aplicação, existem diversos lugares que poderiam ser interessantes a utilização de Memcached para melhorar a performance e a utilização de recursos. Alguns exemplos são:</p>

<ul>
<li><p>a criação de cache para páginas populares, como uma página principal ou em que os dados sejam os mesmos para todos usuários;</p></li>
<li><p>salvar dados transientes e frequentementes atualizados, como um contador em uma página. Isso evita atingir o banco de dados a cada requisição, incrementando o contador no Memcache e atualizando o banco de tempo em tempo*;</p></li>
<li><p>dados frequentemente requisitados, como por exemplo o resultado de uma consulta ao banco.</p></li>
</ul>


<p>[singlepic id=19 w=640 h=480 float=right]Com apenas algumas linhas extras no seu código essas utilizações acima podem melhorar a escalabilidade de seu aplicativo. Memcached nada mais é que uma cache RAM distribuida que utiliza um modelo chave, valor. Escritas na memcache nunca atingem o disco e são muito mais rápidas que acessos ao banco de dados (aproximadamente 10x mais rápido que escrever no banco de dados do Google App Engine e 5x para leituras). O tradeoff é que os dados guardados na memcache são transientes e podem ser descartados quando o espaço se aproximar do limite. Alguns exemplos de sistemas que utilizam Memcache são YouTube, Reddit, Zynga, Facebook, Orange e Twitter.</p>

<p>Um uso bem simples que fiz com esse sistema foi criar uma cache para os anuncios de vagas de emprego no <a href="http://www.tweetvagas.com.br">Tweet Vagas</a>. Nele as pessoas podem anunciar vagas de modo muito descomplicado, apenas preenchendo a descrição. Ao clicar em anunciar o Tweet Vagas cria um link permanente para esse descrição e prepara um tweet contendo esse link e um resumo do anuncio para ser tweetado pelo proprio twitter do usuário. Nesse momento a descrição é gravada no banco de dados do Google App Engine e ao mesmo tempo colocada na Memcache. Assim cada anuncio só acessa o banco de dados na sua escrita, e todas as requisições para essa vaga buscam os dados diretamente da Memcache. Como as vagas tem uma relação direta com sua idade, aquelas mais antigas e menos acessadas são as que tendem a serem limpas da cache, enquanto as mais recentes e acessadas tendem a se manter. Essa arquitetura permite fazer uso muito inteligente do banco de dados, o que é muito importante em uma plataforma SaaS, ja que o custo é proporcional a utilização do serviço.</p>

<p>A utilização de Memcache é bastante simples e encorajada pelo Google App Engine, fazendo parte de sua API, alem de possuir uma página exclusiva dentro do Admin Console (Data - Memcache Viewer) onde você pode ver estatisticas (hits/miss, tamanho da cache, número de itens), limpar a cache e buscar valores pela sua chave. Abaixo veja o código utilizado no Tweet Vagas que faz uso da Memcache:</p>

<p><div><script src='https://gist.github.com/2941459.js?file='></script>
<noscript><pre><code>from google.appengine.api import memcache 

def get_vaga(vaga_id, update = False): 
    vaga = memcache.get(vaga_id) 
    if vaga is None or update: 
        vaga = Vaga.by_id(int(vaga_id)) 
        memcache.set(vaga_id,vaga) 
    return vaga</code></pre></noscript></div>
</p>

<p>Esse método é chamado nas requisições da página de descrição da vaga. O que ele faz na primeira linha é buscar se existe essa chave (vaga_id) na memcache. Se não estiver presente ela busca do banco de dados e coloca o par (chave,valor) em cache. Se esta presente retorna diretamente o valor. Simples assim. O parametro booleano serve para quando houver alguma alteração no banco de dados. Chamar o método com update = True fará com que a cache seja atualizada.</p>

<p>Você utiliza Memcache como se lógicamente fosse uma única memória para todo seu sistema. Independente de quantos servidores você possua, Memcache permite que você faça uso da Memória de cada um desses servidores de modo distribuido, sem que haja necessidade de se responsabilizar pelo gerênciamento complicado que existe por traz disso e permitindo adicionar mais servidores sem se preocupar com complicações em reestruturar a cache. E mais, pela sua filosofia todas as operações tem complexidade O(1), ou seja, toda operação tem tempo de execução constante independente de sua entrada.</p>

<p>Alem de tudo Memcached é Livre e de Código Aberto (Free &amp; Open-source). Você pode pegar o código fonte no GitHub do Memcached, e se não souber utilizar o Git pode ver o tutorial sobre ele <a href="http://samuraidev.com/tutoriais/versionamento-de-codigo-c-git-p1/">aqui no blog</a>. Espero que tenha gostado.</p>

<p><em>*os dados podem ser limpos da memcache a qualquer momento e sua aplicação deve levar isso em conta para lidar com a situação em que os dados foram limpos da cache.</em></p>

<p><strong>Veja mais:</strong></p>

<ul>
<li><p><a href="http://memcached.org/">http://memcached.org/</a></p></li>
<li><p><a href="http://code.google.com/p/memcached/">http://code.google.com/p/memcached/</a></p></li>
<li><p><a href="https://github.com/memcached/memcached">https://github.com/memcached/memcached</a></p></li>
<li><p><a href="https://developers.google.com/appengine/articles/scaling/memcache">https://developers.google.com/appengine/articles/scaling/memcache</a></p></li>
<li><p><a href="https://developers.google.com/appengine/docs/python/memcache/usingmemcache?hl=pt-br">https://developers.google.com/appengine/docs/python/memcache/usingmemcache?hl=pt-br</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Primeiros passos com Groovy]]></title>
    <link href="http://guilhermeka.github.com/samuraidev-blog/blog/2012/05/10/primeiros-passos-com-groovy/"/>
    <updated>2012-05-10T18:44:28-03:00</updated>
    <id>http://guilhermeka.github.com/samuraidev-blog/blog/2012/05/10/primeiros-passos-com-groovy</id>
    <content type="html"><![CDATA[<p><img src="/wp-content/gallery/groovy/groovy-logo-medium.png" alt="Logo do Groovy" />Olá pessoal, hoje vamos aprender como configurar e dar os primeiros passos com a linguagem Groovy. Ela é uma linguagem de programação dinâmica que roda na plataforma Java, ou seja, também é compilada para os famosos bytecodes Java, e foi inspirada em linguagens como Python, Ruby e Smalltalk. Ok, e o que eu ganho com isso? Agilidade no desenvolvimento e compatibilidade com códigos já escritos em Java!
Além disso, Groovy é menos verboso e reduz o tempo de desenvolvimento em muitas das nossas tarefas corriqueiras como veremos em alguns exemplos em futuros posts.</p>

<h2>Instalação e configuração...</h2>

<p>Para começar precisamos fazer o download no site do <a href="http://groovy.codehaus.org/Download">Groovy</a>. Se você já passou pelos passos de configuração de uma JDK, não encontrará dificuldades. Devemos descompactar o pacote num diretório qualquer (no caso do pacote binário) e adicionar o endereço completo deste diretório na variável de ambiente PATH do seu sistema. Para verificar se está tudo certo, podemos testar o seguinte comando (no Console do Linux, ou prompt do Windows) que irá apresentar a versão do Groovy que configuramos:</p>

<pre><code>[bsouza@bsouza ~]$ groovy -version
Groovy Version: 1.8.4 JVM: 1.7.0_03
</code></pre>

<h2>Mão na massa!</h2>

<p>Agora é a hora da diversão! Iremos codar nossos primeiros fontes Groovy. Uma facilidade, para quem é familiarizado com Java, é que você pode continuar utilizando a sintaxe Java e ir melhorando suas habilidades em Groovy aos poucos e assim, incorporar as facilidades do Groovy conforme vai evoluindo em seus estudos.
Iniciaremos nossos testes com o Groovy Console, que é um editor simples onde podemos codar e testar a execução dos nossos primeiros códigos:</p>

<p><img src="/wp-content/gallery/groovy/groovyconsole.png" alt="Editor simples com um console que acompanha a sdk do Groovy" /></p>

<p>Para executar o Groovy Console devemos digitar no Console o comando groovyConsole.</p>

<p>DICA: Java importa automaticamente todas as classes que estão no package java.lang. Groovy por sua vez, extende este comportamento incluindo os pacotes abaixo:
- java.io
- java.math
- java.net    <br/>
- java.util
- groovy.lang
- groovy.util</p>

<p>Em Groovy utilizamos a palavra reservada def para definir algo, essa definição pode ser um método, variáveis com tipagem dinâmica e até closures. Veremos a utilização desta e outras keywords principais da linguagem. Mãos à obra...</p>

<p>DICA: Para limpar a saida do console utilize o atalho ctrl+w e para rodar o seu script utilize ctrl+r.</p>

<pre><code>// definição de um tipo Integer do Java
int numero = 5
println numero.class

// definição de uma String do Java
String nome = "Bruno"
println nome.class

/** **************************************************************************
 * Note que em Groovy, quando temos um método que recebe apenas um parâmetro,
 * podemos ocultar os parenteses, favorecendo assim a legibilidade do código 
 * ***************************************************************************/

// Define uma String em tempo de execução através do seu comportamente,o chamado 
// Duck Typing, ou seja, se o objeto se comporta de uma pato, então ele é um pato.
def duck = "Bruno Moraes Souza"
println duck.class

/** ****************************************************************************
 * Agora iremos definir duas classes com um relacionamento entre elas, e iremos
 * fazer mais alguns testes para ver como o Duck Typing se comporta
 * *****************************************************************************/

// classe mutavel que representará um produto
class Produto {        
    String name
    String descricao
}

/* OBS: Não estamos declarando os getters e os setters
   pois o próprio Groovy faz esse trabalho sujo para nós,
   estes são os chamados Groovy Beans. 

   OBS 2: Repare também, que em Groovy podemos omitir o 
   ponto e vírgula ao final de cada linha */

println "" // simples quebra de linha para facilitar a visualização dos novos resultados

// Instancia um objeto Tipo e popula seus dados através de setters
def produto = new Produto() 
produto.name = "Sistema1"
produto.descricao = "E-Commerce escrito em Grails \\o/"

// Em Groovy, podemos utilizar interpolação de Strings conforme abaixo,
// que é prático e mais legível que uma concatenação
println "Produto: ${produto.name}\nDescrição: ${produto.descricao}\n"
println "${produto.class}"
println produto

/* Note que como não sobrescrevemos o método toString da classe Produto,
 * em nosso print foi retornada a implementação da classe Object. 
 * Isso mesmo, os objetos Groovy também herdam de Object! */

// Vamos agora utilizar o suporte a lista de Groovy e adicionar todas os 
// objetos que instanciamos até agora

def lista = [ numero, nome, duck, produto ]

// Faremos uso agora de uma das facilidades do Groovy para 
// trabalharmos com coleções, que é o método each

println "" // quebra de linha
lista.each { println it }

// note que pela chamada do método, ele recebe apenas um parâmetro, e por isso
// não precisamos dos parênteses. Ele recebe uma closure/delegate como parâmetro 
// que será executada para cada um dos seus elementos e a keyword it representa o elemento atual

println "" // quebra de linha
lista.each { println ((it.class == Produto) ? it.name : it) }

// Para testar a real utilização do it, colocamos um operador ternário, 
// para imprimirmos o nome do tipo, caso o elemento seja um Tipo

/** 
 * Os Groovy Beans, como mencionados anteriormente, criam os getters
 * e setters para o nosso bean, porém em muitos casos gostariamos privar o acesso
 * de um setter para criarmos objetos imutáveis. Em Groovy podemos criar objetos
 * totalmente imutáveis com a anotação @Immutable antes da definição da classe */

@Immutable class ProdutoImutavel {

    String nome
    String descricao

    String toString() { nome } // Sobrescrita do método toString
}

/* Na classe acima, declaramos os mesmos atributos da classe anterior, porém
 * estes são read only, e nos obrigam a utiliza um recurso bem bacana do Groovy,
 * que é um construtor dinâmico. */

println ""

def imutavel = new ProdutoImutavel(nome: "Mouse", descricao: "Mouse wireless")
println "${imutavel.nome} - ${imutavel.descricao}"

// Para verifica se o comportamento é mesmo o esperado, tentaremos renomear o produto
try { imutavel.nome = "novo" } catch (Exception ex) { println ex.message }

println "${imutavel.nome} - ${imutavel.descricao}"
println imutavel // teste do toString sobrescrito

println ""

// Por fim um teste com um atributo dinamicamente tipado
class Dinamico {
    def algo
}

def d = new Dinamico()

// Popula algo com uma string
d.algo = "String"
println d.algo

// Setamos uma closure que recebe dois argumentos
d.algo = { x, y -&gt; (x * y / 2) }
println d.algo(3, 6)
</code></pre>

<p>Na versão estável, 1.8.6 até a presente data, há um bug relacionado ao modificador de acesso private, permitindo que métodos e atributos que utilizem o modificador continuem expostos.</p>

<p>Bom, é isso! Acredito que toda a explicação necessária para o nosso primeiro exemplo está em forma de comentário no código e basta copiá-lo e executá-lo no console.</p>

<p>Espero que tenham gostado e até a próxima!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Instalando node.js no Fedora a partir do código fonte]]></title>
    <link href="http://guilhermeka.github.com/samuraidev-blog/blog/2012/04/26/instalando-node-js-no-fedora-a-partir-do-codigo-fonte/"/>
    <updated>2012-04-26T16:21:09-03:00</updated>
    <id>http://guilhermeka.github.com/samuraidev-blog/blog/2012/04/26/instalando-node-js-no-fedora-a-partir-do-codigo-fonte</id>
    <content type="html"><![CDATA[<p>[singlepic id=12 w=320 h=240 float=left]</p>

<p>O node.js é uma plataforma para construir, de uma forma fácil, aplicações de alta escalabilidade (como um servidor web). Construido sobre o <a href="http://pt.wikipedia.org/wiki/V8_%28JavaScript%29">V8</a>, Node.js usa um modelo orientado a eventos com entradas/saídas assíncronas (que não bloqueiam o servidor). Mas para que você consiga instalar o Node.js no Fedora, primeiro terá que instalar os seguintes pacotes:</p>

<pre><code># yum install openssl-devel
# yum install gcc
# yum install gcc-c++
</code></pre>

<p>Para pegar o código fonte você pode clonar pelo git ou buscar no site <a href="http://nodejs.org/">http://nodejs.org/</a>
Pelo git:</p>

<pre><code>$ git clone git://github.com/joyent/node.git
</code></pre>

<p>É importante destacar que você estará pegando a mais recente versão do código no repositório. Se quiser uma versão anterior (provavelmente mais estável) busque pelas tags do programa e faça um checkout dessa tag.</p>

<pre><code>$ git tag
$ git checkout [nome_da_tag]
</code></pre>

<p>Agora que você tem o código, navegue até a pasta node e prossiga com a instalação:</p>

<pre><code>$ cd node
# ./configure
# make -j2
</code></pre>

<p>Se você se deparar com o erro: "fatal error: gnu/stubs-64.h: No such file or directory" execute o seguinte comando:</p>

<pre><code># yum install glibc-devel.x86_64
</code></pre>

<p>Termine a instalação:</p>

<pre><code># make install
</code></pre>

<p>Adicione usr local ao PATH</p>

<pre><code># export PATH=$PATH:/usr/local/bin:/usr/local
</code></pre>

<p>Execute o comando visudo para editar /etc/sudoers</p>

<pre><code># visudo
</code></pre>

<p>Procure a linha que contem "Defaults secure_path=/sbin:/bin:/usr/sbin:/usr/bin" e adicione ao fim da linha ":/usr/local/bin" sem os parenteses. Você faz isso indo com cursor até o fim da linha, digite "i", escreva ":/usr/local/bin" e então, para salvar, aperte ESC e digite "wq", ENTER.</p>

<p>[singlepic id=13 w=320 h=240 float=center]</p>

<p>Para verificar a versão instalada:</p>

<pre><code>$ node -v
</code></pre>

<p>Pronto!</p>
]]></content>
  </entry>
  
</feed>
